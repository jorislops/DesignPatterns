@startuml
abstract class ShipmentItem {
    + {abstract} CountProducts() : int
    + {abstract} DisplayProducts() : void
}
abstract class ShipmentItemGroup {
    + Items : List<ShipmentItem> <<get>> <<set>>
    + Add(item:ShipmentItem) : void
    + Remove(item:ShipmentItem) : void
    + <<override>> CountProducts() : int
    + <<override>> DisplayProducts() : void
}
class Shipment {
    + <<override>> DisplayProducts() : void
}
class Pallet {
    + <<override>> DisplayProducts() : void
}
class Box {
    + <<override>> DisplayProducts() : void
}
abstract class Product {
    + Name : string <<get>> <<set>>
    + Price : double <<get>> <<set>>
    + Quantity : int <<get>> <<set>>
    + Weight : int <<get>> <<set>>
}
class ProductWithSerialNumber {
    + SerialNumber : string <<get>> <<set>>
    + <<override>> CountProducts() : int
    + <<override>> DisplayProducts() : void
}
class ProductWithoutSerialNumber {
    + <<override>> CountProducts() : int
    + <<override>> DisplayProducts() : void
}
class "List`1"<T> {
}
ShipmentItem <|-- ShipmentItemGroup
ShipmentItemGroup o-> "Items<ShipmentItem>" "List`1"
ShipmentItemGroup <|-- Shipment
ShipmentItemGroup <|-- Pallet
ShipmentItemGroup <|-- Box
ShipmentItem <|-- Product
Product <|-- ProductWithSerialNumber
Product <|-- ProductWithoutSerialNumber
@enduml
